package trianglecalc;

//Generated by Selenium IDE

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.Dimension;

import org.openqa.selenium.JavascriptExecutor;
@TestInstance(Lifecycle.PER_CLASS)
public class TriangleTest {
private ChromeDriver driver;

JavascriptExecutor js;
@BeforeAll
public void setUp() {
	System.setProperty("webdriver.chrome.driver", "C:\\chromedriver.exe");

ChromeOptions options = new ChromeOptions();
options.addArguments("--headless=new");
options.addArguments("--start-maximized");
options.addArguments("--remote-allow-origins=*");
driver = new ChromeDriver(options);
}


@AfterAll
public void tearDown() {
 driver.quit();
}
@Test
public void equilateralTrianglepositive() {
 driver.get("https://www.calculator.net/triangle-calculator.html");
 driver.manage().window().setSize(new Dimension(1536, 824));
 driver.findElement(By.cssSelector(".clearbtn")).click();
 driver.findElement(By.name("vx")).click();
 driver.findElement(By.name("vx")).sendKeys("3");
 driver.findElement(By.name("vy")).click();
 driver.findElement(By.name("vy")).sendKeys("3");
 driver.findElement(By.name("vz")).click();
 driver.findElement(By.name("vz")).sendKeys("3");
 driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
 Assertions.assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(),"Equilateral Triangle");
}

@Test
public void equilateralTrianglenegative() {
  driver.get("https://www.calculator.net/triangle-calculator.html");
  driver.manage().window().setSize(new Dimension(1536, 824));
  driver.findElement(By.cssSelector(".clearbtn")).click();
  driver.findElement(By.name("vx")).click();
  driver.findElement(By.name("vx")).sendKeys("4");
  driver.findElement(By.name("vy")).click();
  driver.findElement(By.name("vy")).sendKeys("4");
  driver.findElement(By.name("vz")).click();
  driver.findElement(By.name("vz")).sendKeys("7");
  driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
  Assertions.assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(),"Equilateral Triangle");
}


@Test
public void allfieldsareempty() {
  driver.get("https://www.calculator.net/triangle-calculator.html");
  driver.manage().window().setSize(new Dimension(1536, 824));
  driver.findElement(By.cssSelector(".clearbtn")).click();
  driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
  Assertions.assertEquals(driver.findElement(By.cssSelector("font")).getText(), "Please provide 3 positive values, including at least one side.");
}

@Test
public void bignumbers() {
  driver.get("https://www.calculator.net/triangle-calculator.html");
  driver.manage().window().setSize(new Dimension(1536, 824));
  driver.findElement(By.cssSelector(".clearbtn")).click();
  driver.findElement(By.name("vc")).click();
  driver.findElement(By.name("vc")).sendKeys("180");
  driver.findElement(By.name("vy")).click();
  driver.findElement(By.name("vy")).sendKeys("9");
  driver.findElement(By.name("vz")).click();
  driver.findElement(By.name("vz")).sendKeys("8");
  driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
  Assertions.assertEquals(driver.findElement(By.cssSelector("font")).getText(), "Angle \"c\" too big.");
}

@Test
public void triangleconditionsnotmet() {
  driver.get("https://www.calculator.net/triangle-calculator.html");
  driver.manage().window().setSize(new Dimension(1536, 824));
  driver.findElement(By.cssSelector(".clearbtn")).click();
  driver.findElement(By.name("vx")).click();
  driver.findElement(By.name("vx")).sendKeys("1");
  driver.findElement(By.name("vy")).click();
  driver.findElement(By.name("vy")).sendKeys("2");
  driver.findElement(By.name("vz")).click();
  driver.findElement(By.name("vz")).sendKeys("4");
  driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
  Assertions.assertEquals(driver.findElement(By.cssSelector("font")).getText(),"The sum of two sides must be larger than the third.");
}

@Test
public void isoscelesTrianglenegative() {
  driver.get("https://www.calculator.net/triangle-calculator.html");
  driver.manage().window().setSize(new Dimension(1536, 824));
  driver.findElement(By.cssSelector(".clearbtn")).click();
  driver.findElement(By.name("vx")).click();
  driver.findElement(By.name("vx")).sendKeys("3");
  driver.findElement(By.name("vy")).click();
  driver.findElement(By.name("vy")).sendKeys("6");
  driver.findElement(By.name("vz")).click();
  driver.findElement(By.name("vz")).sendKeys("5");
  driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
  Assertions.assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(),"Acute Isosceles Triangle");
}

@Test
public void isoscelesTrianglepositive() {
  driver.get("https://www.calculator.net/triangle-calculator.html");
  driver.manage().window().setSize(new Dimension(1536, 824));
  driver.findElement(By.cssSelector(".clearbtn")).click();
  driver.findElement(By.name("vx")).click();
  driver.findElement(By.name("vx")).sendKeys("7");
  driver.findElement(By.name("vy")).click();
  driver.findElement(By.name("vy")).sendKeys("7");
  driver.findElement(By.name("vz")).click();
  driver.findElement(By.name("vz")).sendKeys("5");
  driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
  Assertions.assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(),"Acute Isosceles Triangle");
}

@Test
public void rightScaleneTrianglenegative() {
  driver.get("https://www.calculator.net/triangle-calculator.html");
  driver.manage().window().setSize(new Dimension(1536, 824));
  driver.findElement(By.cssSelector(".clearbtn")).click();
  driver.findElement(By.name("vx")).click();
  driver.findElement(By.name("vx")).sendKeys("7");
  driver.findElement(By.name("vy")).click();
  driver.findElement(By.name("vy")).sendKeys("7");
  driver.findElement(By.name("vz")).click();
  driver.findElement(By.name("vz")).sendKeys("7");
  driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
  Assertions.assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(), "Right Scalene Triangle");
}

@Test
public void rightScaleneTrianglepositive() {
  driver.get("https://www.calculator.net/triangle-calculator.html");
  driver.manage().window().setSize(new Dimension(1536, 824));
  driver.findElement(By.cssSelector(".clearbtn")).click();
  driver.findElement(By.name("vx")).click();
  driver.findElement(By.name("vx")).sendKeys("3");
  driver.findElement(By.name("vy")).click();
  driver.findElement(By.name("vy")).sendKeys("4");
  driver.findElement(By.name("vz")).click();
  driver.findElement(By.name("vz")).sendKeys("5");
  driver.findElement(By.cssSelector("tr:nth-child(5) input")).click();
  Assertions.assertEquals(driver.findElement(By.cssSelector("td > h3")).getText(), "Right Scalene Triangle");
}

}

